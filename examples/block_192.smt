; 
(set-info :status unknown)
(declare-fun x_0_0 () Int)
(declare-fun s_0 () Int)
(declare-fun instr_NOP () Int)
(declare-fun t_1 () Int)
(declare-fun t_0 () Int)
(declare-fun x_2_1 () Int)
(declare-fun x_2_2 () Int)
(declare-fun x_1_1 () Int)
(declare-fun x_1_2 () Int)
(declare-fun x_0_1 () Int)
(declare-fun x_0_2 () Int)
(declare-fun x_3_2 () Int)
(declare-fun instr_DUP () Int)
(declare-fun instr_POP () Int)
(declare-fun instr_ADD () Int)
(declare-fun a_2 () Int)
(declare-fun instr_PUSH () Int)
(declare-fun instr_SWAP () Int)
(declare-fun x_2_0 () Int)
(declare-fun x_1_0 () Int)
(declare-fun x_3_1 () Int)
(declare-fun a_1 () Int)
(declare-fun u_2_0 () Bool)
(declare-fun u_1_0 () Bool)
(declare-fun u_0_0 () Bool)
(declare-fun u_2_1 () Bool)
(declare-fun u_2_2 () Bool)
(declare-fun u_1_1 () Bool)
(declare-fun u_1_2 () Bool)
(declare-fun u_0_1 () Bool)
(declare-fun u_0_2 () Bool)
(declare-fun u_3_1 () Bool)
(declare-fun u_3_0 () Bool)
(assert
 (forall ((s_1 Int) (sk_x Int) )(let (($x21 (and (= u_0_0 true) (= u_1_0 false) (= u_2_0 false))))
 (let (($x25 (= s_0 146)))
 (let (($x32 (=> (= t_0 instr_NOP) (= t_1 instr_NOP))))
 (let (($x122 (= u_2_2 u_2_1)))
 (let (($x124 (= u_1_2 u_1_1)))
 (let (($x126 (= u_0_2 u_0_1)))
 (let (($x127 (and $x126 $x124 $x122)))
 (let (($x129 (= x_2_2 x_2_1)))
 (let (($x130 (=> u_2_1 $x129)))
 (let (($x199 (and (=> u_0_1 (= x_0_2 x_0_1)) (=> u_1_1 (= x_1_2 x_1_1)) $x130)))
 (let (($x202 (=> (= instr_NOP t_1) (and $x199 $x127))))
 (let (($x144 (= u_2_2 u_1_1)))
 (let (($x145 (= u_1_2 u_0_1)))
 (let (($x146 (= u_0_2 true)))
 (let (($x147 (and $x146 $x145 $x144)))
 (let (($x152 (= x_3_2 x_2_1)))
 (let (($x153 (=> u_2_1 $x152)))
 (let (($x149 (= x_2_2 x_1_1)))
 (let (($x150 (=> u_1_1 $x149)))
 (let (($x191 (and (and (= x_0_2 x_0_1) (= x_1_2 x_0_1)) (and (and $x150 $x153) $x147))))
 (let (($x159 (not u_2_1)))
 (let (($x195 (=> (= instr_DUP t_1) (and u_0_1 (=> $x159 $x191)))))
 (let (($x164 (= u_2_2 u_3_1)))
 (let (($x165 (= u_1_2 u_2_1)))
 (let (($x166 (= u_0_2 u_1_1)))
 (let (($x167 (and $x166 $x165 $x164)))
 (let (($x182 (and (=> u_1_1 (= x_0_2 x_1_1)) (=> u_2_1 (= x_1_2 x_2_1)))))
 (let (($x186 (=> (and (= instr_POP t_1) u_0_1) (and $x182 $x167))))
 (let (($x168 (and $x153 $x167)))
 (let (($x217 (and (=> (and (= x_0_1 sk_x) (= x_1_1 1)) (= x_0_2 s_1)) $x168)))
 (let (($x177 (= instr_ADD t_1)))
 (let (($x158 (and (= x_0_2 a_2) (and (and (=> u_0_1 (= x_1_2 x_0_1)) $x150 $x153) $x147))))
 (let (($x162 (=> (and (= instr_PUSH t_1) $x159) $x158)))
 (let (($x138 (=> (and u_0_1 u_1_1) (and (= x_0_2 x_1_1) (= x_1_2 x_0_1)))))
 (let (($x143 (=> (= instr_SWAP t_1) (and u_0_1 (=> u_1_1 (and $x138 (and $x130 $x127)))))))
 (let (($x221 (or $x143 $x162 (=> $x177 (and u_0_1 (=> u_1_1 $x217))) $x186 $x195 $x202)))
 (let (($x35 (= u_2_1 u_2_0)))
 (let (($x37 (= u_1_1 u_1_0)))
 (let (($x39 (= u_0_1 u_0_0)))
 (let (($x40 (and $x39 $x37 $x35)))
 (let (($x43 (= x_2_1 x_2_0)))
 (let (($x44 (=> u_2_0 $x43)))
 (let (($x116 (and (=> u_0_0 (= x_0_1 x_0_0)) (=> u_1_0 (= x_1_1 x_1_0)) $x44)))
 (let (($x119 (=> (= instr_NOP t_0) (and $x116 $x40))))
 (let (($x58 (= u_2_1 u_1_0)))
 (let (($x59 (= u_1_1 u_0_0)))
 (let (($x60 (= u_0_1 true)))
 (let (($x61 (and $x60 $x59 $x58)))
 (let (($x66 (= x_3_1 x_2_0)))
 (let (($x67 (=> u_2_0 $x66)))
 (let (($x63 (= x_2_1 x_1_0)))
 (let (($x64 (=> u_1_0 $x63)))
 (let (($x107 (and (and (= x_0_1 x_0_0) (= x_1_1 x_0_0)) (and (and $x64 $x67) $x61))))
 (let (($x73 (not u_2_0)))
 (let (($x112 (=> (= instr_DUP t_0) (and u_0_0 (=> $x73 $x107)))))
 (let (($x79 (= u_2_1 u_3_0)))
 (let (($x80 (= u_1_1 u_2_0)))
 (let (($x81 (= u_0_1 u_1_0)))
 (let (($x82 (and $x81 $x80 $x79)))
 (let (($x97 (and (=> u_1_0 (= x_0_1 x_1_0)) (=> u_2_0 (= x_1_1 x_2_0)))))
 (let (($x102 (=> (and (= instr_POP t_0) u_0_0) (and $x97 $x82))))
 (let (($x83 (and $x67 $x82)))
 (let (($x225 (and (=> (and (= x_0_0 sk_x) (= x_1_0 1)) (= x_0_1 s_1)) $x83)))
 (let (($x92 (= instr_ADD t_0)))
 (let (($x72 (and (= x_0_1 a_1) (and (and (=> u_0_0 (= x_1_1 x_0_0)) $x64 $x67) $x61))))
 (let (($x77 (=> (and (= instr_PUSH t_0) $x73) $x72)))
 (let (($x51 (=> (and u_0_0 u_1_0) (and (= x_0_1 x_1_0) (= x_1_1 x_0_0)))))
 (let (($x57 (=> (= instr_SWAP t_0) (and u_0_0 (=> u_1_0 (and $x51 (and $x44 $x40)))))))
 (let (($x229 (or $x57 $x77 (=> $x92 (and u_0_0 (=> u_1_0 $x225))) $x102 $x112 $x119)))
 (let (($x231 (and (and $x229 $x221) (and $x32 (and $x25 (and (= x_0_0 sk_x) $x21))))))
 (and (and (= s_0 x_0_1) (= s_1 x_1_1)) $x231))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 )
(check-sat)
