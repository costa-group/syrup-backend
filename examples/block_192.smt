; 
(set-info :status unknown)
(declare-fun t_1 () Int)
(declare-fun t_0 () Int)
(declare-fun x_2_1 () Int)
(declare-fun x_1_2 () Int)
(declare-fun x_0_2 () Int)
(declare-fun x_1_1 () Int)
(declare-fun x_0_1 () Int)
(declare-fun x_2_2 () Int)
(declare-fun a_1 () Int)
(declare-fun x_2_0 () Int)
(declare-fun x_1_0 () Int)
(declare-fun x_0_0 () Int)
(declare-fun a_0 () Int)
(declare-fun s_0 () Int)
(declare-fun u_2_2 () Bool)
(declare-fun u_2_1 () Bool)
(declare-fun u_1_2 () Bool)
(declare-fun u_1_1 () Bool)
(declare-fun u_0_2 () Bool)
(declare-fun u_0_1 () Bool)
(declare-fun u_2_0 () Bool)
(declare-fun u_1_0 () Bool)
(declare-fun u_0_0 () Bool)
(assert
 (forall ((s_1 Int) (sk_x Int) )(let (($x123 (= 4 t_1)))
 (let (($x122 (= 3 t_1)))
 (let (($x121 (= 2 t_1)))
 (let (($x120 (= 1 t_1)))
 (let (($x119 (= 0 t_1)))
 (let (($x181 (and (=> u_1_2 (= x_1_2 x_2_1)) (and (= u_0_2 u_1_1) (= u_1_2 u_2_1) (= u_2_2 false)))))
 (let (($x204 (and (and (= x_0_1 sk_x) (and (= x_1_1 1) (= x_0_2 s_1))) $x181)))
 (let (($x178 (and (=> u_0_2 (= x_0_2 x_0_1)) (=> u_1_2 (= x_1_2 x_1_1)) (=> u_2_2 (= x_2_2 x_2_1)))))
 (let (($x179 (and $x178 (and (= u_0_2 u_0_1) (= u_1_2 u_1_1) (= u_2_2 u_2_1)))))
 (let (($x168 (and (=> u_2_2 (= x_2_2 x_1_1)) (and (= u_0_2 true) (= u_1_2 u_0_1) (= u_2_2 u_1_1)))))
 (let (($x132 (= x_1_2 x_0_1)))
 (let (($x173 (and u_0_1 (and (not u_2_1) (and (= x_0_2 x_0_1) (and $x132 $x168))))))
 (let (($x162 (and (=> u_2_2 (= x_2_2 x_2_1)) (and (= u_0_2 u_0_1) (= u_1_2 u_1_1) (= u_2_2 u_2_1)))))
 (let (($x167 (=> $x121 (and u_0_1 (and u_1_1 (and (and (= x_0_2 x_1_1) $x132) $x162))))))
 (let (($x152 (and (=> u_0_2 (= x_0_2 x_1_1)) (=> u_1_2 (= x_1_2 x_2_1)))))
 (let (($x153 (and $x152 (and (= u_0_2 u_1_1) (= u_1_2 u_2_1) (= u_2_2 false)))))
 (let (($x138 (and (and (=> u_1_2 $x132) (=> u_2_2 (= x_2_2 x_1_1))) (and (= u_0_2 true) (= u_1_2 u_0_1) (= u_2_2 u_1_1)))))
 (let (($x208 (and (=> $x119 (and (not u_2_1) (and (= x_0_2 a_1) $x138))) (=> $x120 (and u_0_1 $x153)) $x167 (=> $x122 $x173) (=> $x123 $x179) (=> (= 5 t_1) (and u_0_1 (and u_1_1 $x204))))))
 (let (($x43 (= 4 t_0)))
 (let (($x42 (= 3 t_0)))
 (let (($x40 (= 2 t_0)))
 (let (($x38 (= 1 t_0)))
 (let (($x37 (= 0 t_0)))
 (let (($x108 (and (=> u_1_1 (= x_1_1 x_2_0)) (and (= u_0_1 u_1_0) (= u_1_1 u_2_0) (= u_2_1 false)))))
 (let (($x214 (and (and (= x_0_0 sk_x) (and (= x_1_0 1) (= x_0_1 s_1))) $x108)))
 (let (($x105 (and (=> u_0_1 (= x_0_1 x_0_0)) (=> u_1_1 (= x_1_1 x_1_0)) (=> u_2_1 (= x_2_1 x_2_0)))))
 (let (($x106 (and $x105 (and (= u_0_1 u_0_0) (= u_1_1 u_1_0) (= u_2_1 u_2_0)))))
 (let (($x95 (and (=> u_2_1 (= x_2_1 x_1_0)) (and (= u_0_1 true) (= u_1_1 u_0_0) (= u_2_1 u_1_0)))))
 (let (($x57 (= x_1_1 x_0_0)))
 (let (($x100 (and u_0_0 (and (not u_2_0) (and (= x_0_1 x_0_0) (and $x57 $x95))))))
 (let (($x89 (and (=> u_2_1 (= x_2_1 x_2_0)) (and (= u_0_1 u_0_0) (= u_1_1 u_1_0) (= u_2_1 u_2_0)))))
 (let (($x94 (=> $x40 (and u_0_0 (and u_1_0 (and (and (= x_0_1 x_1_0) $x57) $x89))))))
 (let (($x79 (and (=> u_0_1 (= x_0_1 x_1_0)) (=> u_1_1 (= x_1_1 x_2_0)))))
 (let (($x80 (and $x79 (and (= u_0_1 u_1_0) (= u_1_1 u_2_0) (= u_2_1 false)))))
 (let (($x64 (and (and (=> u_1_1 $x57) (=> u_2_1 (= x_2_1 x_1_0))) (and (= u_0_1 true) (= u_1_1 u_0_0) (= u_2_1 u_1_0)))))
 (let (($x218 (and (=> $x37 (and (not u_2_0) (and (= x_0_1 a_0) $x64))) (=> $x38 (and u_0_0 $x80)) $x94 (=> $x42 $x100) (=> $x43 $x106) (=> (= 5 t_0) (and u_0_0 (and u_1_0 $x214))))))
 (let (($x220 (and (and $x218 (or $x37 $x38 $x40 $x42 $x43 (= 5 t_0))) (and $x208 (or $x119 $x120 $x121 $x122 $x123 (= 5 t_1))))))
 (let (($x222 (and (and (= s_0 146) (and (= s_0 x_0_2) (and u_0_2 u_1_2))) (and $x220 (=> (= t_0 4) (= t_1 4))))))
 (let (($x225 (=> (and (= s_1 x_1_2) (= x_0_0 sk_x)) (and (= u_0_0 true) (= u_1_0 false) (= u_2_0 false)))))
 (and $x225 $x222)))))))))))))))))))))))))))))))))))))))))
 )
(check-sat)
(get-model)