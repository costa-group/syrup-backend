; 
(set-info :status unknown)
(declare-fun sk_x () Int)
(declare-fun x_0_0 () Int)
(declare-fun s_0 () Int)
(declare-fun instr_NOP () Int)
(declare-fun t_1 () Int)
(declare-fun t_0 () Int)
(declare-fun x_2_1 () Int)
(declare-fun x_2_2 () Int)
(declare-fun x_1_1 () Int)
(declare-fun x_1_2 () Int)
(declare-fun x_0_1 () Int)
(declare-fun x_0_2 () Int)
(declare-fun x_3_2 () Int)
(declare-fun instr_DUP () Int)
(declare-fun instr_POP () Int)
(declare-fun instr_ADD () Int)
(declare-fun a_2 () Int)
(declare-fun instr_PUSH () Int)
(declare-fun instr_SWAP () Int)
(declare-fun x_2_0 () Int)
(declare-fun x_1_0 () Int)
(declare-fun x_3_1 () Int)
(declare-fun a_1 () Int)
(declare-fun u_2_0 () Bool)
(declare-fun u_1_0 () Bool)
(declare-fun u_0_0 () Bool)
(declare-fun u_2_1 () Bool)
(declare-fun u_2_2 () Bool)
(declare-fun u_1_1 () Bool)
(declare-fun u_1_2 () Bool)
(declare-fun u_0_1 () Bool)
(declare-fun u_0_2 () Bool)
(declare-fun u_3_1 () Bool)
(declare-fun u_3_0 () Bool)
(assert
 (let (($x22 (= x_0_0 sk_x)))
 (let (($x23 (and $x22 (and (= u_0_0 true) (= u_1_0 false) (= u_2_0 false)))))
 (let (($x231 (forall ((s_1 Int) (sk_x Int) )(let (($x32 (=> (= t_0 instr_NOP) (= t_1 instr_NOP))))
 (let (($x121 (= u_2_2 u_2_1)))
 (let (($x123 (= u_1_2 u_1_1)))
 (let (($x125 (= u_0_2 u_0_1)))
 (let (($x126 (and $x125 $x123 $x121)))
 (let (($x128 (= x_2_2 x_2_1)))
 (let (($x129 (=> u_2_1 $x128)))
 (let (($x198 (and (=> u_0_1 (= x_0_2 x_0_1)) (=> u_1_1 (= x_1_2 x_1_1)) $x129)))
 (let (($x201 (=> (= instr_NOP t_1) (and $x198 $x126))))
 (let (($x143 (= u_2_2 u_1_1)))
 (let (($x144 (= u_1_2 u_0_1)))
 (let (($x145 (= u_0_2 true)))
 (let (($x146 (and $x145 $x144 $x143)))
 (let (($x151 (= x_3_2 x_2_1)))
 (let (($x152 (=> u_2_1 $x151)))
 (let (($x148 (= x_2_2 x_1_1)))
 (let (($x149 (=> u_1_1 $x148)))
 (let (($x190 (and (and (= x_0_2 x_0_1) (= x_1_2 x_0_1)) (and (and $x149 $x152) $x146))))
 (let (($x158 (not u_2_1)))
 (let (($x194 (=> (= instr_DUP t_1) (and u_0_1 (=> $x158 $x190)))))
 (let (($x163 (= u_2_2 u_3_1)))
 (let (($x164 (= u_1_2 u_2_1)))
 (let (($x165 (= u_0_2 u_1_1)))
 (let (($x166 (and $x165 $x164 $x163)))
 (let (($x181 (and (=> u_1_1 (= x_0_2 x_1_1)) (=> u_2_1 (= x_1_2 x_2_1)))))
 (let (($x185 (=> (and (= instr_POP t_1) u_0_1) (and $x181 $x166))))
 (let (($x167 (and $x152 $x166)))
 (let (($x212 (and (=> (and (= x_0_1 sk_x) (= x_1_1 1)) (= x_0_2 s_1)) $x167)))
 (let (($x176 (= instr_ADD t_1)))
 (let (($x157 (and (= x_0_2 a_2) (and (and (=> u_0_1 (= x_1_2 x_0_1)) $x149 $x152) $x146))))
 (let (($x161 (=> (and (= instr_PUSH t_1) $x158) $x157)))
 (let (($x137 (=> (and u_0_1 u_1_1) (and (= x_0_2 x_1_1) (= x_1_2 x_0_1)))))
 (let (($x142 (=> (= instr_SWAP t_1) (and u_0_1 (=> u_1_1 (and $x137 (and $x129 $x126)))))))
 (let (($x216 (or $x142 $x161 (=> $x176 (and u_0_1 (=> u_1_1 $x212))) $x185 $x194 $x201)))
 (let (($x34 (= u_2_1 u_2_0)))
 (let (($x36 (= u_1_1 u_1_0)))
 (let (($x38 (= u_0_1 u_0_0)))
 (let (($x39 (and $x38 $x36 $x34)))
 (let (($x42 (= x_2_1 x_2_0)))
 (let (($x43 (=> u_2_0 $x42)))
 (let (($x115 (and (=> u_0_0 (= x_0_1 x_0_0)) (=> u_1_0 (= x_1_1 x_1_0)) $x43)))
 (let (($x118 (=> (= instr_NOP t_0) (and $x115 $x39))))
 (let (($x57 (= u_2_1 u_1_0)))
 (let (($x58 (= u_1_1 u_0_0)))
 (let (($x59 (= u_0_1 true)))
 (let (($x60 (and $x59 $x58 $x57)))
 (let (($x65 (= x_3_1 x_2_0)))
 (let (($x66 (=> u_2_0 $x65)))
 (let (($x62 (= x_2_1 x_1_0)))
 (let (($x63 (=> u_1_0 $x62)))
 (let (($x106 (and (and (= x_0_1 x_0_0) (= x_1_1 x_0_0)) (and (and $x63 $x66) $x60))))
 (let (($x72 (not u_2_0)))
 (let (($x111 (=> (= instr_DUP t_0) (and u_0_0 (=> $x72 $x106)))))
 (let (($x78 (= u_2_1 u_3_0)))
 (let (($x79 (= u_1_1 u_2_0)))
 (let (($x80 (= u_0_1 u_1_0)))
 (let (($x81 (and $x80 $x79 $x78)))
 (let (($x96 (and (=> u_1_0 (= x_0_1 x_1_0)) (=> u_2_0 (= x_1_1 x_2_0)))))
 (let (($x101 (=> (and (= instr_POP t_0) u_0_0) (and $x96 $x81))))
 (let (($x82 (and $x66 $x81)))
 (let (($x221 (and (=> (and (= x_0_0 sk_x) (= x_1_0 1)) (= x_0_1 s_1)) $x82)))
 (let (($x91 (= instr_ADD t_0)))
 (let (($x71 (and (= x_0_1 a_1) (and (and (=> u_0_0 (= x_1_1 x_0_0)) $x63 $x66) $x60))))
 (let (($x76 (=> (and (= instr_PUSH t_0) $x72) $x71)))
 (let (($x50 (=> (and u_0_0 u_1_0) (and (= x_0_1 x_1_0) (= x_1_1 x_0_0)))))
 (let (($x56 (=> (= instr_SWAP t_0) (and u_0_0 (=> u_1_0 (and $x50 (and $x43 $x39)))))))
 (let (($x225 (or $x56 $x76 (=> $x91 (and u_0_0 (=> u_1_0 $x221))) $x101 $x111 $x118)))
 (and (and (= s_0 x_0_1) (= s_1 x_1_1)) (and (and $x225 $x216) $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (and $x231 (and (= s_0 146) $x23))))))
(check-sat)
