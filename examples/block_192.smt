; 
(set-info :status unknown)
(declare-fun t_1 () Int)
(declare-fun t_0 () Int)
(declare-fun x_2_1 () Int)
(declare-fun x_1_2 () Int)
(declare-fun x_0_2 () Int)
(declare-fun x_1_1 () Int)
(declare-fun x_0_1 () Int)
(declare-fun x_2_2 () Int)
(declare-fun a_1 () Int)
(declare-fun x_2_0 () Int)
(declare-fun x_1_0 () Int)
(declare-fun x_0_0 () Int)
(declare-fun a_0 () Int)
(declare-fun s_0 () Int)
(declare-fun u_2_2 () Bool)
(declare-fun u_2_1 () Bool)
(declare-fun u_1_2 () Bool)
(declare-fun u_1_1 () Bool)
(declare-fun u_0_2 () Bool)
(declare-fun u_0_1 () Bool)
(declare-fun u_2_0 () Bool)
(declare-fun u_1_0 () Bool)
(declare-fun u_0_0 () Bool)
(assert
 (forall ((s_1 Int) (sk_x Int) )(let (($x124 (= 4 t_1)))
 (let (($x123 (= 3 t_1)))
 (let (($x122 (= 2 t_1)))
 (let (($x121 (= 1 t_1)))
 (let (($x120 (= 0 t_1)))
 (let (($x182 (and (=> u_1_2 (= x_1_2 x_2_1)) (and (= u_0_2 u_1_1) (= u_1_2 u_2_1) (= u_2_2 false)))))
 (let (($x205 (and (and (= x_0_1 sk_x) (and (= x_1_1 1) (= x_0_2 s_1))) $x182)))
 (let (($x179 (and (=> u_0_2 (= x_0_2 x_0_1)) (=> u_1_2 (= x_1_2 x_1_1)) (=> u_2_2 (= x_2_2 x_2_1)))))
 (let (($x180 (and $x179 (and (= u_0_2 u_0_1) (= u_1_2 u_1_1) (= u_2_2 u_2_1)))))
 (let (($x169 (and (=> u_2_2 (= x_2_2 x_1_1)) (and (= u_0_2 true) (= u_1_2 u_0_1) (= u_2_2 u_1_1)))))
 (let (($x133 (= x_1_2 x_0_1)))
 (let (($x174 (and u_0_1 (and (not u_2_1) (and (= x_0_2 x_0_1) (and $x133 $x169))))))
 (let (($x163 (and (=> u_2_2 (= x_2_2 x_2_1)) (and (= u_0_2 u_0_1) (= u_1_2 u_1_1) (= u_2_2 u_2_1)))))
 (let (($x168 (=> $x122 (and u_0_1 (and u_1_1 (and (and (= x_0_2 x_1_1) $x133) $x163))))))
 (let (($x153 (and (=> u_0_2 (= x_0_2 x_1_1)) (=> u_1_2 (= x_1_2 x_2_1)))))
 (let (($x154 (and $x153 (and (= u_0_2 u_1_1) (= u_1_2 u_2_1) (= u_2_2 false)))))
 (let (($x139 (and (and (=> u_1_2 $x133) (=> u_2_2 (= x_2_2 x_1_1))) (and (= u_0_2 true) (= u_1_2 u_0_1) (= u_2_2 u_1_1)))))
 (let (($x209 (and (=> $x120 (and (not u_2_1) (and (= x_0_2 a_1) $x139))) (=> $x121 (and u_0_1 $x154)) $x168 (=> $x123 $x174) (=> $x124 $x180) (=> (= 5 t_1) (and u_0_1 (and u_1_1 $x205))))))
 (let (($x44 (= 4 t_0)))
 (let (($x43 (= 3 t_0)))
 (let (($x41 (= 2 t_0)))
 (let (($x39 (= 1 t_0)))
 (let (($x38 (= 0 t_0)))
 (let (($x109 (and (=> u_1_1 (= x_1_1 x_2_0)) (and (= u_0_1 u_1_0) (= u_1_1 u_2_0) (= u_2_1 false)))))
 (let (($x215 (and (and (= x_0_0 sk_x) (and (= x_1_0 1) (= x_0_1 s_1))) $x109)))
 (let (($x106 (and (=> u_0_1 (= x_0_1 x_0_0)) (=> u_1_1 (= x_1_1 x_1_0)) (=> u_2_1 (= x_2_1 x_2_0)))))
 (let (($x107 (and $x106 (and (= u_0_1 u_0_0) (= u_1_1 u_1_0) (= u_2_1 u_2_0)))))
 (let (($x96 (and (=> u_2_1 (= x_2_1 x_1_0)) (and (= u_0_1 true) (= u_1_1 u_0_0) (= u_2_1 u_1_0)))))
 (let (($x58 (= x_1_1 x_0_0)))
 (let (($x101 (and u_0_0 (and (not u_2_0) (and (= x_0_1 x_0_0) (and $x58 $x96))))))
 (let (($x90 (and (=> u_2_1 (= x_2_1 x_2_0)) (and (= u_0_1 u_0_0) (= u_1_1 u_1_0) (= u_2_1 u_2_0)))))
 (let (($x95 (=> $x41 (and u_0_0 (and u_1_0 (and (and (= x_0_1 x_1_0) $x58) $x90))))))
 (let (($x80 (and (=> u_0_1 (= x_0_1 x_1_0)) (=> u_1_1 (= x_1_1 x_2_0)))))
 (let (($x81 (and $x80 (and (= u_0_1 u_1_0) (= u_1_1 u_2_0) (= u_2_1 false)))))
 (let (($x65 (and (and (=> u_1_1 $x58) (=> u_2_1 (= x_2_1 x_1_0))) (and (= u_0_1 true) (= u_1_1 u_0_0) (= u_2_1 u_1_0)))))
 (let (($x219 (and (=> $x38 (and (not u_2_0) (and (= x_0_1 a_0) $x65))) (=> $x39 (and u_0_0 $x81)) $x95 (=> $x43 $x101) (=> $x44 $x107) (=> (= 5 t_0) (and u_0_0 (and u_1_0 $x215))))))
 (let (($x221 (and (and $x219 (or $x38 $x39 $x41 $x43 $x44 (= 5 t_0))) (and $x209 (or $x120 $x121 $x122 $x123 $x124 (= 5 t_1))))))
 (let (($x223 (and (and (= s_0 146) (and (= s_0 x_0_2) (and u_0_2 u_1_2))) (and $x221 (=> (= t_0 4) (= t_1 4))))))
 (let (($x225 (and (and (= x_0_0 sk_x) (= u_0_0 true)) (= u_1_0 false) (= u_2_0 false))))
 (and (=> (and (= s_1 x_1_2) (= x_0_0 sk_x)) $x225) $x223)))))))))))))))))))))))))))))))))))))))))
 )
(check-sat)
(get-model)