; 
(set-info :status unknown)
(declare-fun s_0 () Int)
(declare-fun instr_NOP () Int)
(declare-fun t_2 () Int)
(declare-fun t_1 () Int)
(declare-fun t_0 () Int)
(declare-fun x_2_1 () Int)
(declare-fun x_2_2 () Int)
(declare-fun x_1_1 () Int)
(declare-fun x_1_2 () Int)
(declare-fun x_0_1 () Int)
(declare-fun x_0_2 () Int)
(declare-fun x_3_2 () Int)
(declare-fun instr_DUP () Int)
(declare-fun instr_POP () Int)
(declare-fun instr_ADD () Int)
(declare-fun a_2 () Int)
(declare-fun instr_PUSH () Int)
(declare-fun instr_SWAP () Int)
(declare-fun x_2_0 () Int)
(declare-fun x_1_0 () Int)
(declare-fun x_0_0 () Int)
(declare-fun x_3_1 () Int)
(declare-fun a_1 () Int)
(declare-fun u_2_0 () Bool)
(declare-fun u_1_0 () Bool)
(declare-fun u_0_0 () Bool)
(declare-fun u_2_1 () Bool)
(declare-fun u_2_2 () Bool)
(declare-fun u_1_1 () Bool)
(declare-fun u_1_2 () Bool)
(declare-fun u_0_1 () Bool)
(declare-fun u_0_2 () Bool)
(declare-fun u_3_1 () Bool)
(declare-fun u_3_0 () Bool)
(assert
 (let (($x23 (and (= s_0 146) (and (= u_0_0 true) (= u_1_0 false) (= u_2_0 false)))))
 (let (($x234 (forall ((s_1 Int) (sk_x Int) )(let (($x33 (and (=> (= t_0 instr_NOP) (= t_1 instr_NOP)) (=> (= t_1 instr_NOP) (= t_2 instr_NOP)))))
 (let (($x124 (= u_2_2 u_2_1)))
 (let (($x126 (= u_1_2 u_1_1)))
 (let (($x128 (= u_0_2 u_0_1)))
 (let (($x129 (and $x128 $x126 $x124)))
 (let (($x131 (= x_2_2 x_2_1)))
 (let (($x132 (=> u_2_1 $x131)))
 (let (($x201 (and (=> u_0_1 (= x_0_2 x_0_1)) (=> u_1_1 (= x_1_2 x_1_1)) $x132)))
 (let (($x204 (=> (= instr_NOP t_1) (and $x201 $x129))))
 (let (($x146 (= u_2_2 u_1_1)))
 (let (($x147 (= u_1_2 u_0_1)))
 (let (($x148 (= u_0_2 true)))
 (let (($x149 (and $x148 $x147 $x146)))
 (let (($x154 (= x_3_2 x_2_1)))
 (let (($x155 (=> u_2_1 $x154)))
 (let (($x151 (= x_2_2 x_1_1)))
 (let (($x152 (=> u_1_1 $x151)))
 (let (($x193 (and (and (= x_0_2 x_0_1) (= x_1_2 x_0_1)) (and (and $x152 $x155) $x149))))
 (let (($x161 (not u_2_1)))
 (let (($x197 (=> (= instr_DUP t_1) (and u_0_1 (=> $x161 $x193)))))
 (let (($x166 (= u_2_2 u_3_1)))
 (let (($x167 (= u_1_2 u_2_1)))
 (let (($x168 (= u_0_2 u_1_1)))
 (let (($x169 (and $x168 $x167 $x166)))
 (let (($x184 (and (=> u_1_1 (= x_0_2 x_1_1)) (=> u_2_1 (= x_1_2 x_2_1)))))
 (let (($x188 (=> (and (= instr_POP t_1) u_0_1) (and $x184 $x169))))
 (let (($x170 (and $x155 $x169)))
 (let (($x215 (and (=> (and (= x_0_1 sk_x) (= x_1_1 1)) (= x_0_2 s_1)) $x170)))
 (let (($x179 (= instr_ADD t_1)))
 (let (($x160 (and (= x_0_2 a_2) (and (and (=> u_0_1 (= x_1_2 x_0_1)) $x152 $x155) $x149))))
 (let (($x164 (=> (and (= instr_PUSH t_1) $x161) $x160)))
 (let (($x140 (=> (and u_0_1 u_1_1) (and (= x_0_2 x_1_1) (= x_1_2 x_0_1)))))
 (let (($x145 (=> (= instr_SWAP t_1) (and u_0_1 (=> u_1_1 (and $x140 (and $x132 $x129)))))))
 (let (($x219 (or $x145 $x164 (=> $x179 (and u_0_1 (=> u_1_1 $x215))) $x188 $x197 $x204)))
 (let (($x35 (= u_2_1 u_2_0)))
 (let (($x37 (= u_1_1 u_1_0)))
 (let (($x39 (= u_0_1 u_0_0)))
 (let (($x40 (and $x39 $x37 $x35)))
 (let (($x43 (= x_2_1 x_2_0)))
 (let (($x44 (=> u_2_0 $x43)))
 (let (($x118 (and (=> u_0_0 (= x_0_1 x_0_0)) (=> u_1_0 (= x_1_1 x_1_0)) $x44)))
 (let (($x121 (=> (= instr_NOP t_0) (and $x118 $x40))))
 (let (($x59 (= u_2_1 u_1_0)))
 (let (($x60 (= u_1_1 u_0_0)))
 (let (($x61 (= u_0_1 true)))
 (let (($x62 (and $x61 $x60 $x59)))
 (let (($x67 (= x_3_1 x_2_0)))
 (let (($x68 (=> u_2_0 $x67)))
 (let (($x64 (= x_2_1 x_1_0)))
 (let (($x65 (=> u_1_0 $x64)))
 (let (($x109 (and (and (= x_0_1 x_0_0) (= x_1_1 x_0_0)) (and (and $x65 $x68) $x62))))
 (let (($x74 (not u_2_0)))
 (let (($x114 (=> (= instr_DUP t_0) (and u_0_0 (=> $x74 $x109)))))
 (let (($x80 (= u_2_1 u_3_0)))
 (let (($x81 (= u_1_1 u_2_0)))
 (let (($x82 (= u_0_1 u_1_0)))
 (let (($x83 (and $x82 $x81 $x80)))
 (let (($x99 (and (=> u_1_0 (= x_0_1 x_1_0)) (=> u_2_0 (= x_1_1 x_2_0)))))
 (let (($x104 (=> (and (= instr_POP t_0) u_0_0) (and $x99 $x83))))
 (let (($x84 (and $x68 $x83)))
 (let (($x224 (and (=> (and (= x_0_0 sk_x) (= x_1_0 1)) (= x_0_1 s_1)) $x84)))
 (let (($x94 (= instr_ADD t_0)))
 (let (($x73 (and (= x_0_1 a_1) (and (and (=> u_0_0 (= x_1_1 x_0_0)) $x65 $x68) $x62))))
 (let (($x78 (=> (and (= instr_PUSH t_0) $x74) $x73)))
 (let (($x52 (=> (and u_0_0 u_1_0) (and (= x_0_1 x_1_0) (= x_1_1 x_0_0)))))
 (let (($x58 (=> (= instr_SWAP t_0) (and u_0_0 (=> u_1_0 (and $x52 (and $x44 $x40)))))))
 (let (($x228 (or $x58 $x78 (=> $x94 (and u_0_0 (=> u_1_0 $x224))) $x104 $x114 $x121)))
 (and (and (= s_0 x_0_1) (= s_1 x_1_1)) (and (and $x228 $x219) $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))
 (and $x234 $x23))))
(check-sat)
