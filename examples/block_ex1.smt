; 
(set-info :status unknown)
(declare-fun t_1 () Int)
(declare-fun t_0 () Int)
(declare-fun x_2_1 () Int)
(declare-fun x_2_2 () Int)
(declare-fun x_1_1 () Int)
(declare-fun x_1_2 () Int)
(declare-fun x_0_1 () Int)
(declare-fun x_0_2 () Int)
(declare-fun a_1 () Int)
(declare-fun x_2_0 () Int)
(declare-fun x_1_0 () Int)
(declare-fun x_0_0 () Int)
(declare-fun a_0 () Int)
(declare-fun s_0 () Int)
(declare-fun u_2_1 () Bool)
(declare-fun u_2_2 () Bool)
(declare-fun u_1_1 () Bool)
(declare-fun u_1_2 () Bool)
(declare-fun u_0_1 () Bool)
(declare-fun u_0_2 () Bool)
(declare-fun u_2_0 () Bool)
(declare-fun u_1_0 () Bool)
(declare-fun u_0_0 () Bool)
(assert
 (let (($x36 (=> (= t_0 4) (= t_1 4))))
 (let (($x131 (= 4 t_1)))
 (let (($x130 (= 3 t_1)))
 (let (($x129 (= 2 t_1)))
 (let (($x128 (= 1 t_1)))
 (let (($x127 (= 0 t_1)))
 (let (($x168 (= u_2_2 u_2_1)))
 (let (($x169 (= u_1_2 u_1_1)))
 (let (($x170 (= u_0_2 u_0_1)))
 (let (($x171 (and $x170 $x169 $x168)))
 (let (($x172 (= x_2_2 x_2_1)))
 (let (($x173 (=> u_2_2 $x172)))
 (let (($x190 (and (=> u_0_2 (= x_0_2 x_0_1)) (=> u_1_2 (= x_1_2 x_1_1)) $x173)))
 (let (($x192 (=> $x131 (and $x190 $x171))))
 (let (($x142 (and (= u_0_2 true) (= u_1_2 u_0_1) (= u_2_2 u_1_1))))
 (let (($x148 (=> u_2_2 (= x_2_2 x_1_1))))
 (let (($x144 (= x_1_2 x_0_1)))
 (let (($x182 (= x_0_2 x_0_1)))
 (let (($x153 (not u_2_1)))
 (let (($x186 (=> $x130 (and u_0_1 (and $x153 (and $x182 (and $x144 (and $x148 $x142))))))))
 (let (($x178 (and u_0_1 (and u_1_1 (and (and (= x_0_2 x_1_1) $x144) (and $x173 $x171))))))
 (let (($x179 (=> $x129 $x178)))
 (let (($x159 (and (= u_0_2 u_1_1) (= u_1_2 u_2_1) (= u_2_2 false))))
 (let (($x163 (=> u_1_2 (= x_1_2 x_2_1))))
 (let (($x167 (=> $x128 (and u_0_1 (and (and (=> u_0_2 (= x_0_2 x_1_1)) $x163) $x159)))))
 (let (($x154 (and $x153 (and (= x_0_2 a_1) (and (and (=> u_1_2 $x144) $x148) $x142)))))
 (let (($x155 (=> $x127 $x154)))
 (let (($x51 (= 4 t_0)))
 (let (($x50 (= 3 t_0)))
 (let (($x48 (= 2 t_0)))
 (let (($x46 (= 1 t_0)))
 (let (($x45 (= 0 t_0)))
 (let (($x113 (and (=> u_0_1 (= x_0_1 x_0_0)) (=> u_1_1 (= x_1_1 x_1_0)) (=> u_2_1 (= x_2_1 x_2_0)))))
 (let (($x114 (and $x113 (and (= u_0_1 u_0_0) (= u_1_1 u_1_0) (= u_2_1 u_2_0)))))
 (let (($x103 (and (=> u_2_1 (= x_2_1 x_1_0)) (and (= u_0_1 true) (= u_1_1 u_0_0) (= u_2_1 u_1_0)))))
 (let (($x65 (= x_1_1 x_0_0)))
 (let (($x108 (and u_0_0 (and (not u_2_0) (and (= x_0_1 x_0_0) (and $x65 $x103))))))
 (let (($x97 (and (=> u_2_1 (= x_2_1 x_2_0)) (and (= u_0_1 u_0_0) (= u_1_1 u_1_0) (= u_2_1 u_2_0)))))
 (let (($x102 (=> $x48 (and u_0_0 (and u_1_0 (and (and (= x_0_1 x_1_0) $x65) $x97))))))
 (let (($x87 (and (=> u_0_1 (= x_0_1 x_1_0)) (=> u_1_1 (= x_1_1 x_2_0)))))
 (let (($x88 (and $x87 (and (= u_0_1 u_1_0) (= u_1_1 u_2_0) (= u_2_1 false)))))
 (let (($x72 (and (and (=> u_1_1 $x65) (=> u_2_1 (= x_2_1 x_1_0))) (and (= u_0_1 true) (= u_1_1 u_0_0) (= u_2_1 u_1_0)))))
 (let (($x421 (and (=> $x45 (and (not u_2_0) (and (= x_0_1 a_0) $x72))) (=> $x46 (and u_0_0 $x88)) $x102 (=> $x50 $x108) (=> $x51 $x114))))
 (let (($x30 (and (and $x421 (or $x45 $x46 $x48 $x50 $x51)) (and (and $x155 $x167 $x179 $x186 $x192) (or $x127 $x128 $x129 $x130 $x131)))))
 (let (($x26 (= s_0 146)))
 (let (($x419 (and (and (= x_0_1 s_0) (= u_0_1 true)) (= u_1_1 false) (= u_2_1 false))))
 (and (and (= u_0_0 false) (= u_1_0 false) (= u_2_0 false)) (and $x419 (and $x26 (and $x30 $x36)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)