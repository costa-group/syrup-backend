; 
(set-info :status unknown)
(declare-fun a_1 () Int)
(declare-fun a_0 () Int)
(declare-fun t_1 () Int)
(declare-fun t_0 () Int)
(declare-fun x_2_1 () Int)
(declare-fun x_2_2 () Int)
(declare-fun x_1_1 () Int)
(declare-fun x_1_2 () Int)
(declare-fun x_0_1 () Int)
(declare-fun x_0_2 () Int)
(declare-fun x_2_0 () Int)
(declare-fun x_1_0 () Int)
(declare-fun x_0_0 () Int)
(declare-fun u_2_1 () Bool)
(declare-fun u_2_2 () Bool)
(declare-fun u_1_1 () Bool)
(declare-fun u_1_2 () Bool)
(declare-fun u_0_1 () Bool)
(declare-fun u_0_2 () Bool)
(declare-fun u_2_0 () Bool)
(declare-fun u_1_0 () Bool)
(declare-fun u_0_0 () Bool)
(assert
 (let (($x385 (and (and (<= 0 a_0) (< a_0 1024)) (and (<= 0 a_1) (< a_1 1024)))))
 (let (($x150 (= 4 t_1)))
 (let (($x149 (= 3 t_1)))
 (let (($x148 (= 2 t_1)))
 (let (($x147 (= 1 t_1)))
 (let (($x146 (= 0 t_1)))
 (let (($x138 (= u_2_2 u_2_1)))
 (let (($x139 (= u_1_2 u_1_1)))
 (let (($x135 (= u_0_2 u_0_1)))
 (let (($x140 (and $x135 $x139 $x138)))
 (let (($x141 (= x_2_2 x_2_1)))
 (let (($x142 (=> u_2_2 $x141)))
 (let (($x173 (and (=> u_0_2 (= x_0_2 x_0_1)) (=> u_1_2 (= x_1_2 x_1_1)) $x142)))
 (let (($x159 (= u_0_2 true)))
 (let (($x160 (and $x159 (= u_1_2 u_0_1) (= u_2_2 u_1_1))))
 (let (($x23 (= x_2_2 x_1_1)))
 (let (($x24 (=> u_2_2 $x23)))
 (let (($x14 (= x_1_2 x_0_1)))
 (let (($x163 (= x_0_2 x_0_1)))
 (let (($x29 (not u_2_1)))
 (let (($x167 (=> $x149 (and u_0_1 (and $x29 (and $x163 (and $x14 (and $x24 $x160))))))))
 (let (($x171 (and u_0_1 (and u_1_1 (and (and (= x_0_2 x_1_1) $x14) (and $x142 $x140))))))
 (let (($x375 (and (=> u_0_2 (= x_0_2 x_1_1)) (=> u_1_2 (= x_1_2 x_2_1)))))
 (let (($x73 (and $x375 (and (= u_0_2 u_1_1) (= u_1_2 u_2_1) (= u_2_2 false)))))
 (let (($x26 (and $x29 (and (= x_0_2 a_1) (and (and (=> u_1_2 $x14) $x24) $x160)))))
 (let (($x180 (and (=> $x146 $x26) (=> $x147 (and u_0_1 $x73)) (=> $x148 $x171) $x167 (=> $x150 (and $x173 $x140)))))
 (let (($x387 (or (= 0 t_0) (= 1 t_0) (= 2 t_0) (= 3 t_0) (= 4 t_0))))
 (let (($x132 (and (=> u_0_1 (= x_0_1 x_0_0)) (=> u_1_1 (= x_1_1 x_1_0)) (=> u_2_1 (= x_2_1 x_2_0)))))
 (let (($x133 (and $x132 (and (= u_0_1 u_0_0) (= u_1_1 u_1_0) (= u_2_1 u_2_0)))))
 (let (($x122 (and (=> u_2_1 (= x_2_1 x_1_0)) (and (= u_0_1 true) (= u_1_1 u_0_0) (= u_2_1 u_1_0)))))
 (let (($x84 (= x_1_1 x_0_0)))
 (let (($x127 (and u_0_0 (and (not u_2_0) (and (= x_0_1 x_0_0) (and $x84 $x122))))))
 (let (($x116 (and (=> u_2_1 (= x_2_1 x_2_0)) (and (= u_0_1 u_0_0) (= u_1_1 u_1_0) (= u_2_1 u_2_0)))))
 (let (($x121 (=> (= 2 t_0) (and u_0_0 (and u_1_0 (and (and (= x_0_1 x_1_0) $x84) $x116))))))
 (let (($x106 (and (=> u_0_1 (= x_0_1 x_1_0)) (=> u_1_1 (= x_1_1 x_2_0)))))
 (let (($x107 (and $x106 (and (= u_0_1 u_1_0) (= u_1_1 u_2_0) (= u_2_1 false)))))
 (let (($x91 (and (and (=> u_1_1 $x84) (=> u_2_1 (= x_2_1 x_1_0))) (and (= u_0_1 true) (= u_1_1 u_0_0) (= u_2_1 u_1_0)))))
 (let (($x96 (=> (= 0 t_0) (and (not u_2_0) (and (= x_0_1 a_0) $x91)))))
 (let (($x388 (and $x96 (=> (= 1 t_0) (and u_0_0 $x107)) $x121 (=> (= 3 t_0) $x127) (=> (= 4 t_0) $x133))))
 (let (($x176 (and (and (and $x388 $x387) (and $x180 (or $x146 $x147 $x148 $x149 $x150))) (and (=> (= t_0 4) (= t_1 4)) $x385))))
 (let (($x174 (= u_2_2 false)))
 (let (($x177 (and (and (and (= x_0_2 146) $x159) (= u_1_2 false) $x174) (and true $x176))))
 (and (and (= u_0_0 false) (= u_1_0 false) (= u_2_0 false)) $x177))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)