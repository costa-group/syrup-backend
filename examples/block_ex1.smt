; 
(set-info :status unknown)
(declare-fun a_1 () Int)
(declare-fun a_0 () Int)
(declare-fun t_1 () Int)
(declare-fun t_0 () Int)
(declare-fun x_2_1 () Int)
(declare-fun x_2_2 () Int)
(declare-fun x_1_1 () Int)
(declare-fun x_1_2 () Int)
(declare-fun x_0_1 () Int)
(declare-fun x_0_2 () Int)
(declare-fun x_2_0 () Int)
(declare-fun x_1_0 () Int)
(declare-fun x_0_0 () Int)
(declare-fun u_2_1 () Bool)
(declare-fun u_2_2 () Bool)
(declare-fun u_1_1 () Bool)
(declare-fun u_1_2 () Bool)
(declare-fun u_0_1 () Bool)
(declare-fun u_0_2 () Bool)
(declare-fun u_2_0 () Bool)
(declare-fun u_1_0 () Bool)
(declare-fun u_0_0 () Bool)
(assert
 (let (($x34 (and (and (<= 0 a_0) (< a_0 1024)) (and (<= 0 a_1) (< a_1 1024)))))
 (let (($x117 (= 4 t_1)))
 (let (($x116 (= 3 t_1)))
 (let (($x115 (= 2 t_1)))
 (let (($x114 (= 1 t_1)))
 (let (($x113 (= 0 t_1)))
 (let (($x146 (= u_2_2 u_2_1)))
 (let (($x147 (= u_1_2 u_1_1)))
 (let (($x148 (= u_0_2 u_0_1)))
 (let (($x149 (and $x148 $x147 $x146)))
 (let (($x150 (= x_2_2 x_2_1)))
 (let (($x151 (=> u_2_2 $x150)))
 (let (($x168 (and (=> u_0_2 (= x_0_2 x_0_1)) (=> u_1_2 (= x_1_2 x_1_1)) $x151)))
 (let (($x119 (= u_2_2 u_1_1)))
 (let (($x120 (= u_1_2 u_0_1)))
 (let (($x19 (= u_0_2 true)))
 (let (($x121 (and $x19 $x120 $x119)))
 (let (($x126 (= x_2_2 x_1_1)))
 (let (($x127 (=> u_2_2 $x126)))
 (let (($x123 (= x_1_2 x_0_1)))
 (let (($x160 (= x_0_2 x_0_1)))
 (let (($x132 (not u_2_1)))
 (let (($x164 (=> $x116 (and u_0_1 (and $x132 (and $x160 (and $x123 (and $x127 $x121))))))))
 (let (($x156 (and u_0_1 (and u_1_1 (and (and (= x_0_2 x_1_1) $x123) (and $x151 $x149))))))
 (let (($x142 (and (=> u_0_2 (= x_0_2 x_1_1)) (=> u_1_2 (= x_1_2 x_2_1)))))
 (let (($x143 (and $x142 (and (= u_0_2 u_1_1) (= u_1_2 u_2_1) (= u_2_2 false)))))
 (let (($x133 (and $x132 (and (= x_0_2 a_1) (and (and (=> u_1_2 $x123) $x127) $x121)))))
 (let (($x171 (and (=> $x113 $x133) (=> $x114 (and u_0_1 $x143)) (=> $x115 $x156) $x164 (=> $x117 (and $x168 $x149)))))
 (let (($x48 (= 4 t_0)))
 (let (($x47 (= 3 t_0)))
 (let (($x45 (= 2 t_0)))
 (let (($x43 (= 1 t_0)))
 (let (($x42 (= 0 t_0)))
 (let (($x86 (= u_2_1 u_2_0)))
 (let (($x87 (= u_1_1 u_1_0)))
 (let (($x88 (= u_0_1 u_0_0)))
 (let (($x89 (and $x88 $x87 $x86)))
 (let (($x90 (= x_2_1 x_2_0)))
 (let (($x91 (=> u_2_1 $x90)))
 (let (($x108 (and (=> u_0_1 (= x_0_1 x_0_0)) (=> u_1_1 (= x_1_1 x_1_0)) $x91)))
 (let (($x52 (= u_2_1 u_1_0)))
 (let (($x54 (= u_1_1 u_0_0)))
 (let (($x56 (= u_0_1 true)))
 (let (($x57 (and $x56 $x54 $x52)))
 (let (($x64 (= x_2_1 x_1_0)))
 (let (($x65 (=> u_2_1 $x64)))
 (let (($x60 (= x_1_1 x_0_0)))
 (let (($x100 (= x_0_1 x_0_0)))
 (let (($x70 (not u_2_0)))
 (let (($x104 (=> $x47 (and u_0_0 (and $x70 (and $x100 (and $x60 (and $x65 $x57))))))))
 (let (($x96 (and u_0_0 (and u_1_0 (and (and (= x_0_1 x_1_0) $x60) (and $x91 $x89))))))
 (let (($x82 (and (=> u_0_1 (= x_0_1 x_1_0)) (=> u_1_1 (= x_1_1 x_2_0)))))
 (let (($x83 (and $x82 (and (= u_0_1 u_1_0) (= u_1_1 u_2_0) (= u_2_1 false)))))
 (let (($x71 (and $x70 (and (= x_0_1 a_0) (and (and (=> u_1_1 $x60) $x65) $x57)))))
 (let (($x111 (and (=> $x42 $x71) (=> $x43 (and u_0_0 $x83)) (=> $x45 $x96) $x104 (=> $x48 (and $x108 $x89)))))
 (let (($x173 (and (and $x111 (or $x42 $x43 $x45 $x47 $x48)) (and $x171 (or $x113 $x114 $x115 $x116 $x117)))))
 (let (($x175 (and true (and $x173 (and (=> (= t_0 4) (= t_1 4)) $x34)))))
 (let (($x17 (= u_2_2 false)))
 (let (($x176 (and (and (and (= x_0_2 146) $x19) (= u_1_2 false) $x17) $x175)))
 (and (and (= u_0_0 false) (= u_1_0 false) (= u_2_0 false)) $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)